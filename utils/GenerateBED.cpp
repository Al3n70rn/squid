#include "../src/SingleBamRec.h"
#include "../src/ReadRec.h"
#include "../src/BPNode.h"
#include "../src/BPEdge.h"
#include "../src/SegmentGraph.h"
#include "../src/WriteIO.h"
#include "../src/Config.h"

using namespace std;

void GenerateBED(string Input_FASTA, string outputfile){
	ifstream input(Input_FASTA);
	ofstream output(outputfile, ios::out);
	string line;
	while(getline(input, line)){
		if(line[0]!='>')
			continue;
		size_t start=line.find("PA");
		if(start==string::npos){
			cout<<"fasta file is not generated by SQUID.\n";
			return;
		}
		line=line.substr(start+3);
		vector<string> strs;
		boost::split(strs, line, boost::is_any_of("-"));
		for(int i=0; i<strs.size(); i++){
			strs[i]=strs[i].substr(1, (int)strs[i].size()-3);
			vector<string> seg;
			boost::split(seg, strs[i], boost::is_any_of(","));
			output<<(seg[0])<<"\t"<<seg[1]<<"\t"<<(stoi(seg[1])+stoi(seg[2]))<<endl;
		}
	}
	input.close();
	output.close();
};

void GenerateBED(SegmentGraph_t& SegmentGraph, vector< vector<int> >& Components, const vector<string>& RefName, string outputfile){
	ofstream output(outputfile, ios::out);
	for(int i=0; i<Components.size(); i++){
		for(int j=0; j<Components[i].size(); j++){
			const Node_t & a=SegmentGraph.vNodes[abs(Components[i][j])-1];
			output<<RefName[a.Chr]<<"\t"<<a.Position<<"\t"<<(a.Position+a.Length)<<endl;
		}
	}
	output.close();
};

void print_help_generateBED(){
	printf("GenerateBED takes in SQUID-output fasta file, or SQUIG graph and component file, to generate a BED file in order to select reads corresponding to interested segment region.\n");
	printf("Usage:\n");
	printf("\tGenerateBED -f <SQUID_FASTA> -o <Output_Prefix>\n");
	printf("\tGenerateBED -b <Input_BAM> -g <SQUID_GRAPH> -c <SQUID_Components> -o <Output_Prefix>\n");
};

int main(int argc, char* argv[]){
	if(argc<3)
		print_help_generateBED();
	else{
		string Input_GRAPH;
		string Input_COMP;

		for(int i=1; i<argc; i++){
			if(string(argv[i])=="-b" && i<argc-1)
				Input_BAM=string(argv[i+1]);
			if(string(argv[i])=="-f" && i<argc-1)
				Input_FASTA=string(argv[i+1]);
			if(string(argv[i])=="-g" && i<argc-1)
				Input_GRAPH=string(argv[i+1]);
			if(string(argv[i])=="-c" && i<argc-1)
				Input_COMP=string(argv[i+1]);
			if(string(argv[i])=="-o" && i<argc-1)
				Output_Prefix=string(argv[i+1]);
		}

		if(Output_Prefix.size()!=0 && Input_FASTA.size()!=0)
			GenerateBED(Input_FASTA, Output_Prefix+"_BED.bed");
		else if(Output_Prefix.size()!=0 && Input_BAM.size()!=0 && Input_GRAPH.size()!=0 && Input_COMP.size()!=0){
			map<string, int> RefTable;
			vector<string> RefName;
			vector<int> RefLength;

			BuildRefName(Input_BAM, RefName, RefTable, RefLength);
			SegmentGraph_t SegmentGraph(Input_GRAPH);
			vector< vector<int> > Components=ReadComponents(Input_COMP);

			GenerateBED(SegmentGraph, Components, RefName, Output_Prefix+"_BED.bed");
		}
		else
			cout<<"Check your input.\n";
	}
};